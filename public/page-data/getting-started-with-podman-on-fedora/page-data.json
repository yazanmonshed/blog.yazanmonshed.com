{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/getting-started-with-podman-on-fedora","result":{"data":{"post":{"__typename":"MdxPost","slug":"/getting-started-with-podman-on-fedora","title":"Getting Started with Podman on Fedora","date":"25.12.2020","tags":[{"name":"containers","slug":"containers"},{"name":"podman","slug":"podman"},{"name":"docker","slug":"docker"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started with Podman on Fedora\",\n  \"date\": \"2020-12-25T00:00:00.000Z\",\n  \"tags\": [\"containers\", \"podman\", \"docker\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"in this article, we will introduce to podman and how using it with smpile application build using nodejs. the app will be very simple and clean.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://podman.io\"\n  }), \"podman\"), \" is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. podman command the same\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docker.com\"\n  }), \"docker\"), \" just type in your terminal alias docker=podman if you have docker already installed.\"), mdx(\"h2\", null, \"install Podman\"), mdx(\"p\", null, \"Podman is by default installed in fedora, but if you don\\u2019t have it for any reason you can install it across type the following command\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ sudo dnf install podman\\n\")), mdx(\"p\", null, \"for fedora silverblue users podman is already installed in your OS, now you can run hello world image to ensure is everything working Good\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ podman pull hello-world \\n$ podman run hello-world\\n\")), mdx(\"p\", null, \"if everything is working well you will show the following output in your terminal\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\nHello from Docker!\\nThis message shows that your installation appears to be working correctly.\\nTo generate this message, Docker took the following steps:\\nThe Docker client contacted the Docker daemon.\\nThe Docker daemon pulled the \\\"hello-world\\\" image from the Docker Hub.\\n(amd64)\\nThe Docker daemon created a new container from that image which runs the\\nexecutable that produces the output you are currently reading.\\nThe Docker daemon streamed that output to the Docker client, which sent it\\nto your terminal.\\nTo try something more ambitious, you can run an Ubuntu container with:\\n$ docker run -it ubuntu bash\\nShare images, automate workflows, and more with a free Docker ID:\\nhttps://hub.docker.com/\\nFor more examples and ideas, visit:\\nhttps://docs.docker.com/get-started\\n\")), mdx(\"h2\", null, \"simple Nodejs App\"), mdx(\"p\", null, \"First, we will create a folder webapp , type the following command in your terminal\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir webapp && cd webapp\\n\")), mdx(\"p\", null, \"then create file package.json this file includes all dependencies that project need to work well copy the following code inside package.json\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\n{\\n       \\\"dependencies\\\": {\\n\\n               \\\"express\\\": \\\"*\\\"\\n       },\\n\\n       \\\"scripts\\\": {\\n\\n\\n               \\\"start\\\": \\\"node index.js\\\"\\n\\n       }\\n\\n}\\n\")), mdx(\"p\", null, \"then create file index.js and add the following code here\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\n\\napp.get('/', (req, res)=> {\\n\\n       res.send(\\\"Hello World!\\\")\\n\\n});\\n\\n\\n\\napp.listen(8081, () => {\\n\\n\\n       console.log(\\\"Listing on port 8080\\\");\\n\\n\\n});\\n\")), mdx(\"p\", null, \"you can download the source code from this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/YazanALMonshed/webapp\"\n  }), \"here\")), mdx(\"h2\", null, \"Create Dockerfile\"), mdx(\"p\", null, \"first of all, create a file called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" make sure the first character is capital, NOT small then add the following code here\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"FROM node:alpine\\n\\nWORKDIR usr/app\\n\\nCOPY ./ ./\\n\\nRUN npm install\\n\\nCMD [\\\"npm\\\", \\\"start\\\"]\\n\")), mdx(\"p\", null, \"be sure you inside the folder webapp then show the image and then type the following command\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"podman build .\\n\")), mdx(\"p\", null, \"make sure to add \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dot\"), \" and now this image was created in your machine you can show this image by the following command\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"podman images\\n\")), mdx(\"p\", null, \"and the last step is run the image inside a container, type the following command in your terminal\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"podman run -p 8080:8080 <image-name>\\n\")), mdx(\"p\", null, \"and the final step is to open your browser in localhost:8080 and you will see your app works\"), mdx(\"h2\", null, \"Stopping and Remove Container\"), mdx(\"p\", null, \"to exit from container across typing CTR \\u2013 C and you can remove container by using container id\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"podman ps -a\\n\\npodman stop <container_id>\\n\")), mdx(\"p\", null, \"and the last thing you can delete the images from your machine by using the following command\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"podman rmi <image_id>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"in this article, we will introduce to podman and how using it with smpile application build using nodejs. the app will be very simple andâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/getting-started-with-podman-on-fedora","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}